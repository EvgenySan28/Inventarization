@page "/Reports"
@inject Data.DB.MyDbContext db
@using Data.DB.entities

<h3>Страница отчетов</h3>
    <div class="input-group mb-3 noprint">
        <div class="input-group-prepend">
            <span class="input-group-text">Отбор по комнате</span>
        </div>
        <div>
            <Blazorise.Components.SelectList Data="Rooms" TItem="Room" TValue="int"
                                             SelectedValue="SelectedRoom"
                                             SelectedValueChanged="FilterRoom"
                                             ValueField="@((s)=>s.RoomID)"
                                             TextField="@((s)=>s.Name)">
            </Blazorise.Components.SelectList>
        </div>
        <div class="input-group-prepend">
            <span class="input-group-text">Отбор по ответственному</span>
        </div>
        <div>
            <Blazorise.Components.SelectList Data="Responsibles" TItem="Responsible" TValue="int"
                                             SelectedValue="SelectedResponsible"
                                             SelectedValueChanged="FilterResponsible"
                                             ValueField="@((s)=>s.ResponsibleID)"
                                             TextField="@((s)=>s.Name +" "+s.LastName)">
            </Blazorise.Components.SelectList>
        </div>
        <input  type="button" name="name" value="Сбросить отбор" @onclick ="OnInitialized" />
    </div>
    <input type="button" class="btn-info noprint" onclick="window.print()" name="name" value="Распечатать" />
<DataGrid TItem="Nomenclature" PageSize="30" ShowPager="@showPaginator"  Data="@context" Editable="false" >
    <DataGridColumn TItem="Nomenclature" Field="@nameof(Nomenclature.Name)" Caption="Наименование" Sortable="true"></DataGridColumn>
    <DataGridColumn TItem="Nomenclature" Field="@nameof(Nomenclature.SerialNumber)" Caption="Серийный номер" Sortable="true"></DataGridColumn>
    <DataGridColumn TItem="Nomenclature" Field="@nameof(Nomenclature.Сondition)" Caption="Состояние" Sortable="true"></DataGridColumn>
    <DataGridColumn TItem="Nomenclature" Field="@nameof(Nomenclature.Room.Name)" Caption="Комната" Sortable="true">
        <DisplayTemplate>
            @if (context.Room != null)
            {
                @(context.Room.Name)
            }
            else
            {
                <p>Номенклатура не привязана к комнате!</p>
            }
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Nomenclature" Field="@nameof(Nomenclature.Name)" Caption="Ответственный" Sortable="true">
        <DisplayTemplate>
            @if (context.Room!=null && context.Room.Responsible != null)
            {
                @(context.Room.Responsible.Name+" "+ context.Room.Responsible.LastName)
            }
            else
            {
                <p>Нет ответственного</p>
            }
        </DisplayTemplate>
    </DataGridColumn>

</DataGrid>
@code {
    List<Nomenclature> context;
    List<Room> Rooms;
    List<Responsible> Responsibles;
    int SelectedRoom { get; set; }
    int SelectedResponsible { get; set; }
    bool showPaginator = false;

    protected override void OnInitialized()
    {
        //Заполнение листа контекст из базы
        context = db.Nomenclatures.Include(s => s.Room).Include(s => s.Room.Responsible).ToList();
        //Заполнение листа комнаты из базы
        Rooms = db.Rooms.ToList();
        //Заполнение листа ответственные из базы
        Responsibles = db.Responsibles.ToList();
        //Если количество строк больше 30, показать пагинатор
        if (context.Count > 30)
        {
            showPaginator = true;
        }

    }
    protected override void OnAfterRender(bool firstRender)
    {
        //этот код нужен, чтобы при первом рендере странице установить селект листы на пустое значение, т.к. не полчучилось сделать
        //красиво, чтобы при клике на уже выбранном значении (без изменения значения), применялся отбор. 
        SelectedResponsible = -1;
        SelectedRoom = -1;
        if (firstRender)
        {
            //после первого рендера страницы, нужно еще раз перерендерить. Иначе не применяются значения
            StateHasChanged();
        }
    }
    /// <summary>
    /// Фильтр по комнате
    /// </summary>
    /// <param name="newValue"></param>
    void FilterRoom(int newValue)
    {
        SelectedRoom = newValue;
        //Заполнение листа контекст из базы с условием, что ID комнаты равен выбранному ID
        context = db.Nomenclatures.Where(s => s.RoomID == SelectedRoom).ToList();
        //Устанавливаем позизию -1 селект листу "ответсвенные", чтобы избежать проблемы с тем, что при выборе уже выбранного значения,
        //не сработает отбор.
        SelectedResponsible = -1;
    }
    /// <summary>
    /// Фильтр по ответственному
    /// </summary>
    /// <param name="newValue"></param>
    void FilterResponsible(int newValue)
    {
        SelectedResponsible = newValue;
        //Заполнение листа контекст из базы с условием, что ID ответственного равен выбранному ID
        context = db.Nomenclatures.Where(s => s.Room.ResponsibleID == SelectedResponsible).ToList();
        //Устанавливаем позизию -1 селект листу "комнаты", чтобы избежать проблемы с тем, что при выборе уже выбранного значения,
        //не сработает отбор.
        SelectedRoom = -1;

    }

}
